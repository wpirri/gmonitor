<?xml version="1.0" standalone="no"?>

<chapter lang="es" id="clasaux">
  <title>Clases auxiliares</title>
  <para>Estas clases se crearon para facilitar la programación del sistema Gnu-Monitor y se encuentran en la librería estática libgmsh.a con la que están linkeados todos los programas del monitor, incluida la libreria del cliente.</para>
  <section>
    <title>Clase CGMError</title>
    <para>Esta clase encapsula los mensajes correspondientes a los valores de error devueltos por la interface del monitor, ya sean las clases del cliente o las de los servers.</para>
    <section>
      <title>Message</title>
      <para>Devuelve la cadena del mensaje correspondiente al error del sistema Gnu-Monitor según el indice que se le pasa por parámetro.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>string <function>Message</function></funcdef>
        <paramdef>int <parameter>error</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve la cadena del mensaje correspondiente al último error declarado del sistema Gnu-Monitor.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>string <function>Message</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
    <section>
      <title>Last</title>
      <para>Permite declarar un error para que este sea el utilizado por defecto por <function>Message</function> y al convocarlo sin parámetros devuelve el último error declarado.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Last</function></funcdef>
        <paramdef>int <parameter>error</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve el valor del último error declarado.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Last</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
    <section>
      <title>Constantes de Error</title>
      <para>Para facilitar la escritura de los clientes y los servers se declararon constantes con los valores de error utilizados y se reservó un área para continuar agregando.</para>
      <table><title>Constantes de Error</title>
      <tgroup cols="3">
      <thead>
        <row>
          <entry>Constante</entry>
          <entry>Valor</entry>
          <entry>Descripción</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><constant>GME_OK</constant> y <constant>GME_NO_ERROR</constant></entry>
          <entry>0</entry>
          <entry>Sin error.</entry>
        </row>
        <row>
          <entry><constant>GME_UNDEFINED</constant></entry>
          <entry>1</entry>
          <entry>Error aún no definido</entry>
        </row>
        <row>
          <entry><constant>GME_FCN_NOTFOUND</constant></entry>
          <entry>2</entry>
          <entry>No hay servidores declarados que resuelvan la combinación de servicio y tipo solicitado.</entry>
        </row>
        <row>
          <entry><constant>GME_SVR_NOTFOUND</constant></entry>
          <entry>3</entry>
          <entry>No hay servidores levantados que resuelvan la combinación de servicio y tipo solicitado. La diferencia con <constant>GME_FCN_NOTFOUND</constant> es que en este caso el servicio y tipo están declarados pero el servidor que debe resolverlo no se encuentra disponible.</entry>
        </row>
        <row>
          <entry><constant>GME_SVC_NOTFOUND</constant></entry>
          <entry>4</entry>
          <entry>*** COMPLETAR ***</entry>
        </row>
        <row>
          <entry><constant>GME_MSGQ_ERROR</constant></entry>
          <entry>5</entry>
          <entry>Error en sistema de colas de mensajes.</entry>
        </row>
        <row>
          <entry><constant>GME_HOST_NOTFOUND</constant></entry>
          <entry>6</entry>
          <entry>Error en la resolución de nombre del sistema monitor.</entry>
        </row>
        <row>
          <entry><constant>GME_INVALID_HOST</constant></entry>
          <entry>7</entry>
          <entry>El nombre pasado para el monitor no es un nombre de red válido.</entry>
        </row>
        <row>
          <entry><constant>GME_NOT_CONNECTED</constant></entry>
          <entry>8</entry>
          <entry>Se intentó enviar un mensaje sin estar conectado.</entry>
        </row>
        <row>
          <entry><constant>GME_COMM_ERROR</constant></entry>
          <entry>9</entry>
          <entry>Error de comunicación (de protocolo).</entry>
        </row>
        <row>
          <entry><constant>GME_SVC_DB_ERROR</constant></entry>
          <entry>10</entry>
          <entry>Error en la base de datos de servicios.</entry>
        </row>
        <row>
          <entry><constant>GME_INVALID_HEADER</constant></entry>
          <entry>11</entry>
          <entry>Error de decodificación o integridad del header del mensaje.</entry>
        </row>
        <row>
          <entry><constant>GME_INVALID_MESSAGE</constant></entry>
          <entry>12</entry>
          <entry>Error de decodificación o intergridad del mensaje.</entry>
        </row>
        <row>
          <entry><constant>GME_TRAN_NOT_ALLOWED</constant></entry>
          <entry>13</entry>
          <entry>Intento de comenzar una segunda transacción sin haber terminado la primera. El sistema no permite anidar transacciones.</entry>
        </row>
        <row>
          <entry><constant>GME_UNKNOWN_TRAN</constant></entry>
          <entry>14</entry>
          <entry>Se intentó continuar con un transacción que no estaba iniciada o ya venció.</entry>
        </row>
        <row>
          <entry><constant>GME_INVALID_TRAN</constant></entry>
          <entry>15</entry>
          <entry>Error al intentar iniciar una transacción.</entry>
        </row>
        <row>
          <entry><constant>GME_TRAN_NOT_INIT</constant></entry>
          <entry>16</entry>
          <entry>Se intenta concluir una transacción que no fué iniciada o ya venció.</entry>
        </row>
        <row>
          <entry><constant>GME_ERROR_MAX</constant></entry>
          <entry>100</entry>
          <entry>Indica el espacio reservado para futuros códigos de error.</entry>
        </row>
        <row>
          <entry><constant>GME_USER_ERROR</constant></entry>
          <entry><constant>GME_ERROR_MAX</constant></entry>
          <entry>Valor para para comenzar a definir valores de error de usuario.</entry>
        </row>
      </tbody>
      </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Clase CGMBuffer</title>
    <para>Esta clase encapsula un buffer de uso genérico utilizado para almacenar los datos enviados y recibidos en distintas secciones del sistema.</para>
    <section>
      <title>CGMBuffer</title>
      <para>Al constuir el objeto del buffer se le puede asignar un contenido inicial con alguno de los siguientes modelos.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CGMBuffer</function></funcdef>
        <paramdef>const char* <parameter>str</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CGMBuffer</function></funcdef>
        <paramdef>const void* <parameter>ptr</parameter></paramdef>
        <paramdef>unsigned long <parameter>len</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CGMBuffer</function></funcdef>
        <paramdef>string <parameter>s</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>str</parameter> corresponde a un string terminado en nul.</para>
      <para>El parámetro <parameter>ptr</parameter> corresponde a un puntero y se incorporará al objeto todo el contenido apuntado hasta <parameter>len</parameter>.</para>
      <para>El parámetro <parameter>len</parameter> corresponde al tamaño del dato en <parameter>ptr</parameter>.</para>
      <para>El parámetro <parameter>s</parameter> corresponde a un string.</para>
    </section>
    <section>
      <title>Clear</title>
      <para>Permite limpiar el contenido del objeto borrando todo su contenido y liberando la memoria alocada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>void <function>Clear</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
    <section>
      <title>Operador =</title>
      <para>Asigna el dato al objeto buffer. Devuelve un puntero al buffer interno o NULL en caso de error.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>operator=</function></funcdef>
        <paramdef>const char* <parameter>str</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>operator=</function></funcdef>
        <paramdef>CGMBuffer <parameter>buffer</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>operator=</function></funcdef>
        <paramdef>string <parameter>s</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>str</parameter> corresponde a un string terminado en nul.</para>
      <para>El parámetro <parameter>buffer</parameter> corresponde a otro objeto CGMBuffer.</para>
      <para>El parámetro <parameter>s</parameter> corresponde a un string.</para>
    </section>
    <section>
      <title>Operador +=</title>
      <para>Agrega el dato al final del contenido actual del objeto buffer. Devuelve un puntero al buffer interno o NULL en caso de error.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>operator=</function></funcdef>
        <paramdef>const char* <parameter>str</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>operator=</function></funcdef>
        <paramdef>CGMBuffer <parameter>buffer</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>operator=</function></funcdef>
        <paramdef>string <parameter>s</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>str</parameter> corresponde a un string terminado en nul.</para>
      <para>El parámetro <parameter>buffer</parameter> corresponde a otro objeto CGMBuffer.</para>
      <para>El parámetro <parameter>s</parameter> corresponde a un string.</para>
    </section>
    <section>
      <title>Set</title>
      <para>Asigna el dato al objeto buffer. Devuelve un puntero al buffer interno o NULL en caso de error.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Set</function></funcdef>
        <paramdef>const char* <parameter>str</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Set</function></funcdef>
        <paramdef>const void* <parameter>ptr</parameter></paramdef>
        <paramdef>unsigned long <parameter>len</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Set</function></funcdef>
        <paramdef>CGMBuffer <parameter>buffer</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Set</function></funcdef>
        <paramdef>string <parameter>s</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>str</parameter> corresponde a un string terminado en nul.</para>
      <para>El parámetro <parameter>ptr</parameter> corresponde a un puntero y se incorporará al objeto todo el contenido apuntado hasta <parameter>len</parameter>.</para>
      <para>El parámetro <parameter>len</parameter> corresponde al tamaño del dato en <parameter>ptr</parameter>.</para>
      <para>El parámetro <parameter>buffer</parameter> corresponde a otro objeto CGMBuffer.</para>
      <para>El parámetro <parameter>s</parameter> corresponde a un string.</para>
    </section>
    <section>
      <title>Add</title>
      <para>Agrega el dato al final del contenido actual del objeto buffer. Devuelve un puntero al buffer interno o NULL en caso de error.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Add</function></funcdef>
        <paramdef>const char* <parameter>str</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Add</function></funcdef>
        <paramdef>const void* <parameter>ptr</parameter></paramdef>
        <paramdef>unsigned long <parameter>len</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Add</function></funcdef>
        <paramdef>CGMBuffer <parameter>buffer</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Add</function></funcdef>
        <paramdef>string <parameter>s</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>str</parameter> corresponde a un string terminado en nul.</para>
      <para>El parámetro <parameter>ptr</parameter> corresponde a un puntero y se incorporará al objeto todo el contenido apuntado hasta <parameter>len</parameter>.</para>
      <para>El parámetro <parameter>len</parameter> corresponde al tamaño del dato en <parameter>ptr</parameter>.</para>
      <para>El parámetro <parameter>buffer</parameter> corresponde a otro objeto CGMBuffer.</para>
      <para>El parámetro <parameter>s</parameter> corresponde a un string.</para>
    </section>
    <section>
      <title>Format</title>
      <para>Permite setear al buffer con un string formateado al estilo <function>printf</function>. Devuelve un puntero al buffer interno o NULL en caso de error.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Format</function></funcdef>
        <paramdef>const char* <parameter>fmt</parameter></paramdef>
        <paramdef>... </paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>fmt</parameter> es una mascara de formato con las mismas prestaciones que la utilizada en <function>printf</function>.</para>
      <para>El parámetro <parameter>...</parameter> es una lista de argumentos variable separados por "," .</para>
    </section>
    <section>
      <title>AddFormat</title>
      <para>Permite agregar al contenido actual del buffer un string formateado al estilo <function>printf</function>. Devuelve un puntero al buffer interno o NULL en caso de error.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>AddFormat</function></funcdef>
        <paramdef>const char* <parameter>fmt</parameter></paramdef>
        <paramdef>... </paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>fmt</parameter> es una mascara de formato con las mismas prestaciones que la utilizada en <function>printf</function>.</para>
      <para>El parámetro <parameter>...</parameter> es una lista de argumentos variable separados por "," .</para>
    </section>
    <section>
      <title>Length</title>
      <para>Devuelve el tamaño del dato alojado en el objeto buffer.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>unsigned long <function>Length</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
    <section>
      <title>Data</title>
      <para>Devuelve un puntero al buffer interno donde se aloja el dato.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>Data</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
    <section>
      <title>C_Str</title>
      <para>Devuelve un puntero al buffer interno donde se aloja el dato pero asegurandose de que corresponda a un string terminado en nul.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>const char* <function>C_Str</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
    <section>
      <title>String</title>
      <para>Devuelve string compuesto por el contenido del buffer.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>string <function>String</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
    </section>
  </section>
  <section>
    <title>Clase CShMem</title>
    <para>Esta clase encapsula el manejo de memoria compartida.</para>
    <section>
      <title>CShMem</title>
      <para>Es el contructor de la clase, permite asignarle una clave en el momento de la creación, sino puede hacerse después.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CShMem</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CShMem</function></funcdef>
        <paramdef>int <parameter>key</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>key</parameter> es el valor de la clave.</para>
    </section>
    <section>
      <title>Key</title>
      <para>Permite asignar una clave al objeto luego de su creación, esto es útil cuando se usa esta clase como un objeto estático y se le quiere asignar la clave en el momento de ejecución.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Key</function></funcdef>
        <paramdef>int <parameter>key</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>key</parameter> es el valor de la clave.</para>
    </section>
    <section>
      <title>Create</title>
      <para>Crea un area de memoria compartida del tamaño indicado y la inicializa en blanco (toda con nul).</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Create</function></funcdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del bloque de memoria a crear.</para>
    </section>
    <section>
      <title>Open</title>
      <para>Se engancha de un área de memoria compartida previamente creada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Open</function></funcdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del bloque de memoria donde se engancha.</para>
    </section>
    <section>
      <title>Close</title>
      <para>Si el objeto corresponde al creador del área de memoria compartida dicha área es destruida, en cambio si no lo es solamente se desengancha.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Close</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
    </section>
    <section>
      <title>SetAt</title>
      <para>Escribe en el área de memoria compartida en una posición determinada. Este miembro solo puede ser utilizado por una clase derivada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>SetAt</function></funcdef>
        <paramdef>int <parameter>pos</parameter></paramdef>
        <paramdef>const void* <parameter>data</parameter></paramdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>pos</parameter> indica la posición inicial donde escribir los datos.</para>
      <para>El parámetro <parameter>data</parameter> es un puntero al dato a escribir en la memoria compartida.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del dato en <parameter>data</parameter>.</para>
    </section>
    <section>
      <title>GetAt</title>
      <para>Lee del área de memoria compartida desde una posición determinada. Este miembro solo puede ser utilizado por una clase derivada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>GetAt</function></funcdef>
        <paramdef>int <parameter>pos</parameter></paramdef>
        <paramdef>void* <parameter>data</parameter></paramdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>pos</parameter> indica la posición inicial de donde comenzar a leer los datos.</para>
      <para>El parámetro <parameter>data</parameter> es un puntero a donde escribir los datos leidos de memoria compartida.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del dato a copiar en <parameter>data</parameter>.</para>
    </section>
  </section>
  <section>
    <title>Clase CSincro</title>
    <para>Esta clase encapsula el manejo de semaforos.</para>
    <section>
      <title>CSincro</title>
      <para>Es el contructor de la clase, permite asignarle una clave en el momento de la creación, sino puede hacerse después.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CSincro</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CSincro</function></funcdef>
        <paramdef>int <parameter>key</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>key</parameter> es el valor de la clave.</para>
    </section>
    <section>
      <title>Key</title>
      <para>Permite asignar una clave al objeto luego de su creación, esto es útil cuando se usa esta clase como un objeto estático y se le quiere asignar la clave en el momento de ejecución.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Key</function></funcdef>
        <paramdef>int <parameter>key</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>key</parameter> es el valor de la clave.</para>
    </section>
    <section>
      <title>Create</title>
      <para>Crea un grupo de semaforos seteandole su estado inicial, el valor por defecto es WAIT.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Create</function></funcdef>
        <paramdef>int <parameter>count</parameter></paramdef>
        <paramdef>int <parameter>init_val</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>count</parameter> indica la cantidad de semaforos a crear.</para>
      <para>El parámetro <parameter>init_val</parameter> indica el valor inicial a asignarle a los semaforos.</para>
    </section>
    <section>
      <title>Open</title>
      <para>Se engancha a un grupo de semaforos creado.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Open</function></funcdef>
        <paramdef>int <parameter>count</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>count</parameter> indica la cantidad de semaforos del grupo.</para>
    </section>
    <section>
      <title>Close</title>
      <para>Si el objeto corresponde al creador de los semaforos el grupo es destruido, en cambio si no lo es solamente se desengancha.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Close</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
    </section>
    <section>
      <title>Wait</title>
      <para>Realiza un WAIT sobre el semaforo indicado.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Wait</function></funcdef>
        <paramdef>int <parameter>sem</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>sem</parameter> es el índice a un semáforo del grupo.</para>
    </section>
    <section>
      <title>Signal</title>
      <para>Realiza un SIGNAL sobre el semaforo indicado.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Signal</function></funcdef>
        <paramdef>int <parameter>sem</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>sem</parameter> es el índice a un semáforo del grupo.</para>
    </section>
    <section>
      <title>Set</title>
      <para>Permite asignarle un valor a semaforo.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Set</function></funcdef>
        <paramdef>int <parameter>sem</parameter></paramdef>
        <paramdef>int <parameter>val</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>sem</parameter> es el índice a un semáforo del grupo.</para>
      <para>El parámetro <parameter>val</parameter> es el valor a asignarle al semaforo.</para>
    </section>
  </section>
  <section>
    <title>Clase CSincMem</title>
    <para>Esta clase permite hacer un manejo de memoria compartida sincronizada por medio de semaforos, para esto se deriva de <classname>CShMem</classname> y <classname>CSincro</classname>.</para>
    <section>
      <title>CSincMem</title>
      <para>Es el contructor de la clase, permite asignarle una clave en el momento de la creación, sino puede hacerse después.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CSincMem</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CSincMem</function></funcdef>
        <paramdef>int <parameter>key</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>key</parameter> es el valor de la clave.</para>
    </section>
    <section>
      <title>Key</title>
      <para>Permite asignar una clave al objeto luego de su creación, esto es útil cuando se usa esta clase como un objeto estático y se le quiere asignar la clave en el momento de ejecución.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Key</function></funcdef>
        <paramdef>int <parameter>key</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>key</parameter> es el valor de la clave.</para>
    </section>
    <section>
      <title>Create</title>
      <para>Crea un area de memoria compartida del tamaño indicado y la inicializa en blanco (toda con nul).</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Create</function></funcdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del bloque de memoria a crear.</para>
    </section>
    <section>
      <title>Open</title>
      <para>Se engancha de un área de memoria compartida previamente creada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Open</function></funcdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del bloque de memoria donde se engancha.</para>
    </section>
    <section>
      <title>Close</title>
      <para>Si el objeto corresponde al creador del área de memoria compartida dicha área es destruida, en cambio si no lo es solamente se desengancha.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>Close</function></funcdef>
        <void />
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
    </section>
    <section>
      <title>SetAt</title>
      <para>Escribe en el área de memoria compartida en una posición determinada. Este miembro solo puede ser utilizado por una clase derivada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>SetAt</function></funcdef>
        <paramdef>int <parameter>pos</parameter></paramdef>
        <paramdef>const void* <parameter>data</parameter></paramdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>pos</parameter> indica la posición inicial donde escribir los datos.</para>
      <para>El parámetro <parameter>data</parameter> es un puntero al dato a escribir en la memoria compartida.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del dato en <parameter>data</parameter>.</para>
    </section>
    <section>
      <title>GetAt</title>
      <para>Lee del área de memoria compartida desde una posición determinada. Este miembro solo puede ser utilizado por una clase derivada.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>int <function>GetAt</function></funcdef>
        <paramdef>int <parameter>pos</parameter></paramdef>
        <paramdef>void* <parameter>data</parameter></paramdef>
        <paramdef>int <parameter>length</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>Devuelve 0 para confirmar o -1 en caso de error.</para>
      <para>El parámetro <parameter>pos</parameter> indica la posición inicial de donde comenzar a leer los datos.</para>
      <para>El parámetro <parameter>data</parameter> es un puntero a donde escribir los datos leidos de memoria compartida.</para>
      <para>El parámetro <parameter>length</parameter> indica el tamaño del dato a copiar en <parameter>data</parameter>.</para>
    </section>
  </section>
  <section>
    <title>Clase CGLog</title>
    <para>Esta clase encapsula las funciones de logeo del sistema monitor, pero puede utilizarse para generar otros logs de usuario.</para>
    <para>Los server del monitor ya tienen un log abierto que puede ser utilizado a través del objeto <varname>m_pLog</varname>.</para>
    <section>
      <title>CGLog</title>
      <para>Este es el contructor de la clase, a través de sus parámetros se puede definir el nombre del proceso, archivo donde se va a loguear y el nivel se logeo.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef><function>CGLog</function></funcdef>
        <paramdef>const char* <parameter>appname</parameter></paramdef>
        <paramdef>const char* <parameter>logpath</parameter></paramdef>
        <paramdef>unsigned int <parameter>loglevel</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>appname</parameter> permite indicar el nombre de la aplicación, real o de fantasía.</para>
      <para>Este nombre aparecerá al principio de la linea del log para permitir la identificación en caso que se utilice un mismo log para varios procesos.</para>
    </section>
    <section>
      <title>Add</title>
      <para>Permite agregar una nueva línea al log utilizando una cadena de formato.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>void <function>Add</function></funcdef>
        <paramdef>unsigned int <parameter>level</parameter></paramdef>
        <paramdef>const char* <parameter>msg</parameter></paramdef>
        <paramdef>... </paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>level</parameter> permite indicar el nivel de importancia del mensaje, si este nivel es de igual o mayor importancia que el elegido al crear el objeto entonces se escribe en el log.</para>
      <para>El parámetro <parameter>msg</parameter> es una cadena de formato similar a la utilizada en un <function>printf</function>.</para>
      <para>El parámetro <parameter>...</parameter> es una lista de argumentos variable separados por "," .</para>
    </section>
    <section>
      <title>AddBin</title>
      <para>Permite agregar una nueva línea al log con contenido binario.</para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>void <function>AddBin</function></funcdef>
        <paramdef>unsigned int <parameter>level</parameter></paramdef>
        <paramdef>const char* <parameter>id</parameter></paramdef>
        <paramdef>const void* <parameter>buffer</parameter></paramdef>
        <paramdef>unsigned int <parameter>len</parameter></paramdef>
        <paramdef>... </paramdef>
      </funcprototype>
      </funcsynopsis>
      <para>El parámetro <parameter>level</parameter> permite indicar el nivel de importancia del mensaje, si este nivel es de igual o mayor importancia que el elegido al crear el objeto entonces se escribe en el log.</para>
      <para>El parámetro <parameter>id</parameter> permite ponerle una etiqueta adicional al dato que se graba.</para>
      <para>El parámetro <parameter>buffer</parameter> corresponde al dato a grabar en el log.</para>
      <para>El parámetro <parameter>len</parameter> corresponde al tamaño del dato en <varname>buffer</varname>.</para>
    </section>
  </section>
</chapter>
